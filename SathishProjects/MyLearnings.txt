Web App development and deployment.
    1. Development
        1. The in WEB-INF folder can be accessed only through internal path. Hence any path in Html/JSP page to direct access cannot be done.
           Either we need to use JSTL Core tag <img src="<c:url value='/images/temp.jpg'/>" alt=.../>. Or
           Else move the image or any directory to webapp. Not inside of WEB-INF.
        2. We should not mentioned the path start from / because if we use context root as /health or /anything else.
           Then resource path start from root. ex : http://localhost:8080/health/img/temp.jpg if we use /img/temp.jpg then
           then the link parsed as http://localhost:8080/img/temp.jpg which is not available.
           <img src="${pageContext.request.contextPath}/images/tarun.jpg"/>
           <img src="<%= request.getContextPath() %>/images/tarun.jpg">
           <img src='<%= request.getContextPath() + "/images/tarun.jpg" %>'>
           or in a jsp2.0 container using EL: <img src="${pageContext.request.contextPath}/images/tarun.jpg"/>
        3.
    2. Deployment

===========================================================================================================
1. All Required Basic parameters should be  passed from outside. It should not be initialized within the method. Because in feature it may required to pass from outside. That time need to change entire program or code.
2. When developing Bi-Directional Entity in Hibernate it might be a chance to load the business value in circular form. To avoid that need to implement hashcode and equals methods. If object were different then continue to load. Otherwise we should not load circular form.
3. @Autowired will cause Circular auto injection. To avoid that Its beter way to for Constructor Injection Or Settor Injectction.
4. Its not at all possible to instantiate an abstract class with impl if any Proxy created. For example if you create an AOP or Transactional then you can assign to Interface but not to abstract base class.
