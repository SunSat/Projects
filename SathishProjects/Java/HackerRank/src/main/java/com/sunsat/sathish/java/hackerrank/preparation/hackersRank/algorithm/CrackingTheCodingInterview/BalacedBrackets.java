package com.sunsat.sathish.java.hackerrank.preparation.hackersRank.algorithm.CrackingTheCodingInterview;

import java.util.ArrayList;
import java.util.Scanner;

/**
 * Created by ssundar2 on 02-02-2017.
 */
public class BalacedBrackets {
    public static boolean isBalanced(String expression) {
        if(expression.length()%2 != 0) return false;
        ArrayList<Character> al = new ArrayList<Character>();
        int top = 0;
        char[] ch = expression.toCharArray();
        char clCh = 0;
        for(char c : ch) {
            switch (c) {
                case '{' :
                case '[' :
                case '(' : {
                    al.add(top++,c);
                    break;
                }
                case '}': {
                    if(top == 0) return false;
                    clCh = al.get(--top);
                    if(clCh !='{') return false;
                    break;
                }
                case ']': {
                    if(top == 0) return false;
                    clCh = al.get(--top);
                    if(clCh !='[') return false;
                    break;
                }
                case ')':{
                    if(top == 0) return false;
                    clCh = al.get(--top);
                    if(clCh !='(') return false;
                    break;
                }
            }
        }
        if(top != 0) return false;
        return true;
    }

    public static void main(String[] args) {
        /*Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            String expression = in.next();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }*/
        String st = "[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]\n" +
                "[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}\n" +
                "(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]\n" +
                "){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]\n" +
                "}(]}){\n" +
                "((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(\n" +
                "{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())\n" +
                "(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]\n" +
                "()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])\n" +
                "[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][\n" +
                "{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}\n" +
                "()(){{}}[()()]{}{}\n" +
                "{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])\n" +
                "{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})\n" +
                "][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{\n" +
                "{{}(\n" +
                "{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}\n" +
                "()[[][()[]][]()](([[[(){()[[]](([]))}]]]))\n" +
                "()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))\n" +
                "}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][\n" +
                "[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)\n" +
                ")})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]\n" +
                "[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]\n" +
                "({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]\n" +
                "([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]\n" +
                "[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})\n" +
                "(]{()}((\n" +
                "[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]\n" +
                "}[})})}[)]{}{)\n" +
                "({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}\n" +
                "]}})[]))]{][])[}(])]({[]}[]([)\n" +
                "[{{}{[{{[}[[}([]\n" +
                "[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]\n" +
                "]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}\n" +
                "{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][\n" +
                "(]{}{(}}}[)[\n" +
                "[]{}{[[]]}([{}]{}[]){{(())}}\n" +
                "[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]\n" +
                "{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]\n" +
                ")}][(})){))[{}[}\n" +
                "{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]\n" +
                "()()()[]\n" +
                "((){}])][]][}{]{)]]}][{]}[)(])[}[({(\n" +
                ")[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(\n" +
                "}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}\n" +
                "([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])\n" +
                "[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]\n" +
                "{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[\n" +
                "{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]\n" +
                "{[{}[][]]}[((()))][]({})[]{}{()}\n" +
                "(){[{({})}]}\n" +
                "([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[\n" +
                "((({{}(([{}(())]))[()]{[[[]()]]}})))\n" +
                "}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(\n" +
                "{}{}{}{[[()]][]}\n" +
                ")]}]({{})[[[{]{{{}}][))]{{\n" +
                "))){({}])}])}}]{)()(}(]}([\n" +
                "([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))\n" +
                "(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[\n" +
                "([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}\n" +
                "[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}\n" +
                "}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}\n" +
                "[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}\n" +
                "{{(([{)]{}({][{](){({([[[][)}[)})(\n" +
                "[{}]{[()({[{}]})]}\n" +
                "[[{}]]\n" +
                "]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}\n" +
                "{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}\n" +
                "]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}\n" +
                "(]}[{}{";
        String st1 = "{{}(\n";
        Scanner in = new Scanner(st1);
        while(in.hasNext()) {
            String expression = in.nextLine();
            System.out.println( (isBalanced(expression)) ? "YES" : "NO" );
        }
    }
}
